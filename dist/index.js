"use strict";var t=require("@notionhq/client"),e=require("@notion-stuff/blocks-html-parser"),s=require("lodash"),i=require("fs"),a=require("path");const r=/<figure notion-figure>[\s\S]+<img[^>]*src=['|"](https?:\/\/[^'|"]+)(?:['|"])/;Object.defineProperty(String.prototype,"slug",{get:function(){return s.kebabCase(this)}}),Object.defineProperty(String.prototype,"route",{get:function(t="/"){return this.padStart(this.length+1,t)}});module.exports=class{cms;cmsId;notionClient;parser;pendingEntries;pageRetrievalCache;debug;limiter;constructor({databaseId:s,notionAPIKey:i,debug:a,rootUrl:r,limiter:n}={databaseId:"",notionAPIKey:"",debug:!1,rootUrl:""},o){this.cms=o&&JSON.parse(o)||{metadata:{databaseId:s,rootUrl:r?new URL(r):""},stages:[],routes:[],tags:[],tagGroups:{},transient:{},siteData:{}},this.cmsId=s,this.notionClient=new t.Client({auth:i}),this.parser=e.NotionBlocksHtmlParser.getInstance(),this.pendingEntries=new Set,this.pageRetrievalCache={},this.debug=a,this.limiter=n||{schedule:t=>{const e=t();return Promise.resolve(e)}},this.limiter.schedule.bind(n)}get data(){if(!s.isEmpty(this.cms.siteData))return this.cms.siteData}get routes(){if(!s.isEmpty(this.cms.siteData))return this.toplevelDirectories?(this.cms.routes=[],this.toplevelDirectories.forEach((t=>{this.cms.routes.push(this._genRoutes(t))})),this.cms.routes=this.cms.routes.flat()):void 0}get toplevelDirectories(){if(!s.isEmpty(this.cms.siteData))return Object.entries(this.cms.siteData)}_genRoutes(t){const e=[],i=t[0],a=s(t[1]).pickBy(((t,e)=>s.startsWith(e,"/"))).entries().value();return a.length?(a.forEach((t=>{const s=this._genRoutes(t);s.length?s.forEach((t=>e.push(i+t))):e.push(i+s)})),e.push(i),e):[i]}_clearPageRetrievalCache(){this.pageRetrievalCache={}}_isTopLevelDir(t){const e=t?.properties["parent-page"];return s.isEmpty(e.relation)}_getBlockName(t){const e=t?.properties.name;return e.title[0]?.plain_text}_extractTags(t){const e=t?.properties?.Tags;return e.multi_select.map((t=>t.name))}_assignTagGroup(t,e,s){s.tagGroups[t]||(s.tagGroups[t]=[]),s.tagGroups[t].push(e)}_findByKey(t,e){let s;return Object.keys(t).some((i=>i===e?(s=t[i],!0):t[i]&&"object"==typeof t[i]?(s=this._findByKey(t[i],e),void 0!==s):void 0)),s}_getCoverImage(t,e){const s=t?.cover;let i;return i=s&&"external"in s?s?.external?.url:s?.file?s?.file.url:e.match(r)?.[1],i}async _pullPageContent(e,i){let a;const r=[];a=await this._retrievePage(e);const n=await this.limiter.schedule((async()=>await this.notionClient.blocks.children.list({block_id:e,page_size:50}))),o=this._getBlockName(a).slug,c=this.parser.parse(n.results);if(t.isFullPage(a)){const t=this._getCoverImage(a,c);return this._extractTags(a).forEach((t=>{r.push(t),s.includes(i.tags,t)||i.tags.push(t),this._assignTagGroup(t,o.route,i)})),{name:o,tags:r,coverImage:t,content:c}}return{name:"",tags:[],coverImage:new URL(""),content:""}}_findInPending(t){let e;return this.pendingEntries.forEach((s=>{t===s.entry&&(e=s)})),e}async _retrievePage(t){let e=this.pageRetrievalCache[t];return e||(e=await this.limiter.schedule((async()=>await this.notionClient.pages.retrieve({page_id:t}))),this.pageRetrievalCache[t]=e),e}async _addPage(e,i,a){let r,n,o,c,h,l;const g=e.parentPage;if(g&&(c=await this._retrievePage(g)),r=await this._retrievePage(i),r&&t.isFullPage(r)){n=this._getBlockName(r).slug.route;const s=r.properties?.Author;o=s.people.map((t=>t.name)),e.name=n,c&&t.isFullPage(c)?(h=this._getBlockName(c).slug.route,l=this._findByKey(a,h)):l=a}if(l&&n){l[n]||(l[n]={authors:o});const t=this._findInPending(e);t&&this.pendingEntries.delete(t)}else{let t=!0;for(const i of this.pendingEntries)if(s.isEqual(e,i.entry)){t=!1;break}t&&this.pendingEntries.add({id:i,entry:e})}}async _getAuthorData(t){let e;return t?.length?(e=await Promise.all(t.map((async t=>await this.limiter.schedule((async()=>await this.notionClient.users.retrieve({user_id:t})))))).then((t=>{if(t?.length)return t.map((t=>t.name))})),e||[]):[]}async _getPageContent(t){let e=s.cloneDeep(t);if(!e.transient)return e;for await(const[t,s]of Object.entries(e.transient)){let i=this._findByKey(e.siteData,s.name);const a=await this._pullPageContent(t,e);i.name=a.name,i.tags=a.tags,i.coverImage=a.coverImage,i.content=a.content}return e.stages.push("content"),e}async _getPages(t){let e=s.cloneDeep(t);if(!e.transient)return e;for await(const[t,s]of Object.entries(e.transient))await this._addPage(s,t,e.siteData);for(;this.pendingEntries.size;)for await(const t of this.pendingEntries)await this._addPage(t.entry,t.id,e.siteData);return e.stages.push("pages"),e}async _getDb(t){let e=s.cloneDeep(t);if(!e.transient)return e;const i=await this.limiter.schedule((async()=>await this.notionClient.databases.query({database_id:t.metadata.databaseId})));for await(const t of i.results){let s=e.transient[t.id]={name:"",parentPage:"",authorIds:void 0};const i=t.properties["parent-page"];i&&(s.parentPage=i.relation[0]?.id)}return e.stages.push("db"),e}async fetch(){var t,e;return this._clearPageRetrievalCache(),s.includes(this.cms.stages,"db")||(this.cms=await this._getDb(this.cms)),s.includes(this.cms.stages,"pages")||(this.cms=await this._getPages(this.cms)),s.includes(this.cms.stages,"content")||(this.cms=await this._getPageContent(this.cms)),delete this.cms.transient,this.routes,this.debug&&(t="debug/site-data.json",e=JSON.stringify(this.cms),i.mkdirSync(a.dirname(t),{recursive:!0}),i.writeFileSync(t,e)),this.cms}getTaggedCollection(t){s.isArray(t)||(t=[t]);const e=[];for(const s of t)e.push(...this.cms.tagGroups[s]);return s(e).map((t=>this._findByKey(this.cms.siteData,t))).uniq().value()}export(){return JSON.stringify(this.cms)}};
