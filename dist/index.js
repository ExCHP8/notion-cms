import{Client as t,isFullPage as e}from"@notionhq/client";import{NotionBlocksHtmlParser as s}from"@notion-stuff/blocks-html-parser";import i from"lodash";import o from"fs";const r=/<figure notion-figure>[\s\S]+<img[^>]*src=['|"](https?:\/\/[^'|"]+)(?:['|"])/;Object.defineProperty(String.prototype,"slug",{get:function(){return i.kebabCase(this)}}),Object.defineProperty(String.prototype,"route",{get:function(t="/"){return this.padStart(this.length+1,t)}});class n{cms;cmsId;notionClient;parser;constructor(e,i){this.cms={metadata:{},routes:[],siteData:{}},this.cmsId=e,this.notionClient=new t({auth:i}),this.parser=s.getInstance()}get routes(){i.isEmpty(this.cms.siteData)||(console.log(this.toplevelDirectories),this.toplevelDirectories&&(this.toplevelDirectories.forEach((t=>{this.cms.routes.push(this._genRoutes(t))})),console.log("got it odne",this.cms.routes),this.cms.routes=this.cms.routes.flat()))}get toplevelDirectories(){if(!i.isEmpty(this.cms.siteData))return Object.entries(this.cms.siteData)}_genRoutes(t){const e=[],s=t[0],o=i(t[1]).pickBy(((t,e)=>i.startsWith(e,"/"))).entries().value();return o.length?(o.forEach((t=>{const i=this._genRoutes(t);i.length?i.forEach((t=>e.push(s+t))):e.push(s+i)})),e.push(s),e):[s]}_isTopLevelDir(t){const e=t?.properties["parent-page"];return i.isEmpty(e.relation)}_getBlockName(t){const e=t?.properties.name;return e.title[0]?.plain_text}async _getAuthorData(t){const e=t.properties?.Author,s=e.people;let i;return s?.length?(i=await Promise.all(s.map((async t=>await this.notionClient.users.retrieve({user_id:t.id})))).then((t=>{if(t?.length)return t.map((t=>t.name))})),i||[]):[]}_findKey(t,e){let s;return Object.keys(t).some((i=>i===e?(s=t[i],!0):t[i]&&"object"==typeof t[i]?(s=this._findKey(t[i],e),void 0!==s):void 0)),s}async _getPageContent(t){let s;s="page"===t?.object?t:await this.notionClient.pages.retrieve({page_id:t.id});const i=await this.notionClient.blocks.children.list({block_id:t.id,page_size:50}),o=this.parser.parse(i.results);if(e(s)){const t=s?.cover;let e;return e=t&&"external"in t?t?.external?.url:t?.file?t?.file.url:o.match(r)?.[1],{name:this._getBlockName(s).slug,authors:await this._getAuthorData(s),coverImage:e,content:o}}return{name:"",authors:[],coverImage:new URL(""),content:""}}async fetchCms(){const t=await this.notionClient.databases.query({database_id:this.cmsId}),s=new Set,r=async t=>{const o=t.properties["parent-page"].relation[0],r=await this.notionClient.pages.retrieve({page_id:o.id});if(e(r)){const e=this._getBlockName(r).slug.route,o=this._findKey(this.cms.siteData,e);if(o){const e=await this._getPageContent(t);o[e.name.route]||(o[e.name.route]=e);const i=((t,e)=>{let s;return e.forEach((e=>{t===e.entry&&(s=e)})),s})(t,s);i&&s.delete(i)}else{let o=!0;for(const e of s)if(i.isEqual(t,e.entry)){o=!1;break}o&&s.add({parentName:e,entry:t})}}};for await(const e of t.results)if(this._isTopLevelDir(e)){const t=await this._getPageContent(e),s=this.cms.siteData[this._getBlockName(e).slug.route]={...t},i=e.properties["sub-page"];if(i.relation.length)for await(const t of i.relation){const e=await this._getPageContent(t);s[e.name.route]=e}}else await r(e);for(;s.size;){console.log("trigger while",s.size);for await(const t of s)console.log(t.parentName),await r(t.entry),o.writeFileSync("debug/site-data.json",JSON.stringify(this.cms.siteData))}return console.log("complete"),this.cms}}export{n as default};
//# sourceMappingURL=index.js.map
