{"version":3,"file":"index.js","sources":["../src/notion-cms.ts"],"sourcesContent":["import { Client, isFullPage } from \"@notionhq/client\"\nimport {PageObjectResponse,\n  DatabaseObjectResponse, \n  TextRichTextItemResponse, UserObjectResponse} from '@notionhq/client/build/src/api-endpoints'\nimport { NotionBlocksHtmlParser } from '@notion-stuff/blocks-html-parser'\nimport {Blocks} from '@notion-stuff/v4-types'\nimport type { PageEntry, CMS, PageContent, TitleDatabasePropertyConfigResponse} from \"./types\"\nimport _ from 'lodash'\nimport fs from 'fs'\n\nObject.defineProperty(String.prototype, \"slug\", {\n  get: function() {\n    return _.kebabCase(this)\n  }\n})\n\nObject.defineProperty(String.prototype, \"route\", {\n  get: function(separator = \"/\") {\n    return this.padStart(this.length + 1, separator)\n  }\n})\n\nexport default class NotionCMS {\n  cms: CMS\n  cmsId: string\n  notionClient: Client\n  parser: NotionBlocksHtmlParser\n\n  constructor(databaseID: string, notionAPIKey: string) {\n    this.cms = {\n      metadata: {},\n      routes: [],\n      siteData: {}\n    }\n    this.cmsId = databaseID\n    this.notionClient = new Client({\n      auth: notionAPIKey\n    })\n    this.parser = NotionBlocksHtmlParser.getInstance()\n  }\n\n  _isTopLevelDir (response: DatabaseObjectResponse | PageObjectResponse): boolean {\n    return _.isEmpty(response?.properties['parent-page']['relation'])\n  }\n  \n  _getBlockName(response: DatabaseObjectResponse | PageObjectResponse): string {\n    console.log(response.properties.name, 'RESP')\n    return ((response?.properties.name['title'] as TitleDatabasePropertyConfigResponse)?.[0] as TextRichTextItemResponse)?.plain_text\n  }\n\n  async _getAuthorData(page: PageObjectResponse): Promise<Array<string>> {\n    const authorIds = page.properties?.Author?.['people']\n    let authors;\n    if (authorIds?.length) {\n      authors = await Promise.all(\n        authorIds.map(async (author: UserObjectResponse) => await this.notionClient.users.retrieve({ user_id: author.id }))\n      ).then(res => {\n        if (res?.length) {\n          return res.map(author => author.name as string)\n        }\n      })\n      return authors || []\n    }\n    return []\n  }\n\n  _findKey(object: Record<string, object>, key: string): object | undefined {\n    let value;\n    Object.keys(object).some((k: string) => {\n      if (k === key) {\n        value = object[k];\n        return true;\n      }\n      if (object[k] && typeof object[k] === 'object') {\n        value = this._findKey(object[k] as Record<string, object>, key);\n        return value !== undefined;\n      }\n    });\n    return value;\n  }\n\n  async _getPageContent(subPage: PageObjectResponse): Promise<PageContent> {\n    let page;\n    if (subPage.object === 'page') {\n      page = subPage\n    } else {\n      page = await this.notionClient.pages.retrieve({\n        page_id: subPage.id\n      })\n    }\n  \n    const pageContent = await this.notionClient.blocks.children.list({\n      block_id: subPage.id,\n      page_size: 50,\n    })\n  \n    const parsed = this.parser.parse(pageContent.results as Blocks)\n  \n    const coverImageRegex = /<figure notion-figure>[\\s\\S]+<img[^>]*src=['|\"](https?:\\/\\/[^'|\"]+)(?:['|\"])/\n  \n    // Fall back to the first image in the page if one exists.\n    if (isFullPage(page)) {\n      const coverImage = page && page?.cover?.external?.url || page?.cover?.file.url || parsed.match(coverImageRegex)?.[1]\n  \n      console.log(this._getBlockName(page), 'NMAE', this._getBlockName(page)?.slug)\n      return {\n        name: this._getBlockName(page)?.slug,\n        authors: await this._getAuthorData(page),\n        coverImage,\n        content: parsed\n      }\n    } else return {\n      name: '',\n      authors: [],\n      coverImage: new URL(''),\n      content: ''\n    }\n  }\n\n  async fetchCms(): Promise<CMS> {\n    const db = await this.notionClient.databases.query({\n      database_id: this.cmsId,\n    });\n  \n    const pendingEntries = new Set<PageEntry>()\n  \n    const findInPending = (entry: PageObjectResponse, pendingEntries: Set<PageEntry>) => {\n      let match\n      pendingEntries.forEach(pendingEntry => {\n        if (entry === pendingEntry.entry) {\n          match = pendingEntry\n        }\n      })\n      return match\n    }\n  \n    const addSubPage = async (entry: PageObjectResponse): Promise<void> => {\n      const parent = entry.properties['parent-page']['relation'][0]\n      // how to avoid this async call? It causes the process to take quite a long time.\n      const parentPage = await this.notionClient.pages.retrieve({ page_id: parent.id })\n      if (isFullPage(parentPage)) {\n        const parentName = this._getBlockName(parentPage)?.slug?.route\n        const updateKey = this._findKey(this.cms.siteData, parentName)\n    \n        if (updateKey) {\n          const content = await this._getPageContent(entry)\n          if (!updateKey[content.name?.route]) updateKey[content.name?.route] = content\n    \n          const match = findInPending(entry, pendingEntries)\n          if (match) pendingEntries.delete(match)\n        } else {\n          let shouldAdd = true\n          for (const pendingEntry of pendingEntries) {\n            if (_.isEqual(entry, pendingEntry.entry)) {\n              shouldAdd = false; break;\n            };\n          }\n          if (shouldAdd) {\n            pendingEntries.add({\n              parentName,\n              entry\n            })\n          }\n        }\n      }\n    }\n  \n    for await (const entry of db.results as PageObjectResponse[]) {\n      if (this._isTopLevelDir(entry)) {\n        const content = await this._getPageContent(entry)\n        const currentDir = this.cms.siteData[this._getBlockName(entry)?.slug.route] = { ...content }\n        if (entry.properties['sub-page']['relation'].length) {\n          for await (const subPage of entry.properties['sub-page']['relation']) {\n            const content = await this._getPageContent(subPage)\n            currentDir[content.name?.route] = content\n          }\n        }\n      } else {\n        await addSubPage(entry)\n      }\n    }\n    while (pendingEntries.size) {\n      console.log('trigger while', pendingEntries.size)\n      for await (const pendingEntry of pendingEntries) {\n        console.log(pendingEntry.parentName)\n        await addSubPage(pendingEntry.entry)\n        fs.writeFileSync('debug/site-data.json', JSON.stringify(this.cms.siteData))\n      }\n    }\n    console.log('complete')\n    return this.cms\n  }\n\n\n}"],"names":["Object","defineProperty","String","prototype","get","_","kebabCase","this","separator","padStart","length","NotionCMS","cms","cmsId","notionClient","parser","constructor","databaseID","notionAPIKey","metadata","routes","siteData","Client","auth","NotionBlocksHtmlParser","getInstance","_isTopLevelDir","response","isEmpty","properties","_getBlockName","console","log","name","plain_text","async","page","authorIds","Author","authors","Promise","all","map","author","users","retrieve","user_id","id","then","res","_findKey","object","key","value","keys","some","k","subPage","pages","page_id","pageContent","blocks","children","list","block_id","page_size","parsed","parse","results","coverImageRegex","isFullPage","coverImage","cover","external","url","file","match","slug","_getAuthorData","content","URL","db","databases","query","database_id","pendingEntries","Set","addSubPage","entry","parent","parentPage","parentName","route","updateKey","_getPageContent","forEach","pendingEntry","findInPending","delete","shouldAdd","isEqual","add","currentDir","size","fs","writeFileSync","JSON","stringify"],"mappings":"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"}